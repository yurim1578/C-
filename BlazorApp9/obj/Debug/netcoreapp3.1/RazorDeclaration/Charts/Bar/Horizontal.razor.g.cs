// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace BlazorApp9.Charts.Bar
{
    #line default
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using System.Net.Http

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using Microsoft.AspNetCore.Authorization

#nullable disable
    ;
#nullable restore
#line 3 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization

#nullable disable
    ;
#nullable restore
#line 4 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms

#nullable disable
    ;
#nullable restore
#line 5 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing

#nullable disable
    ;
#nullable restore
#line 6 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using Microsoft.AspNetCore.Components.Web

#nullable disable
    ;
#nullable restore
#line 7 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using Microsoft.JSInterop

#nullable disable
    ;
#nullable restore
#line 8 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using BlazorApp9

#nullable disable
    ;
#nullable restore
#line 10 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using BlazorApp9.Shared

#nullable disable
    ;
#nullable restore
#line 11 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using ChartJs.Blazor;

#nullable disable
#nullable restore
#line 13 "C:\Users\bookp\source\repos\C-\BlazorApp9\_Imports.razor"
using BlazorApp9.ChartJs_Blazor

#nullable disable
    ;
#nullable restore
#line 2 "C:\Users\bookp\source\repos\C-\BlazorApp9\Charts\Bar\Horizontal.razor"
 using ChartJs.Blazor.BarChart

#nullable disable
    ;
#nullable restore
#line 3 "C:\Users\bookp\source\repos\C-\BlazorApp9\Charts\Bar\Horizontal.razor"
 using System.Drawing

#line default
#line hidden
#nullable disable
    ;
    [global::Microsoft.AspNetCore.Components.LayoutAttribute(typeof(SampleLayout))]
    [global::Microsoft.AspNetCore.Components.RouteAttribute(
    // language=Route,Component
#nullable restore
#line 1 "C:\Users\bookp\source\repos\C-\BlazorApp9\Charts\Bar\Horizontal.razor"
      "/charts/bar/horizontal"

#line default
#line hidden
#nullable disable
    )]
    #nullable restore
    public partial class Horizontal : global::Microsoft.AspNetCore.Components.ComponentBase
    #nullable disable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(global::Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 14 "C:\Users\bookp\source\repos\C-\BlazorApp9\Charts\Bar\Horizontal.razor"
       
    private const int InitalCount = 7;
    private BarConfig _config;
    private Random _rng = new Random();
    private Chart _chart;

    protected override void OnInitialized()
    {
        _config = new BarConfig(horizontal: true)
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Position = Position.Right
                },
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "ChartJs.Blazor Horizontal Bar Chart"
                }
            }
        };

        IDataset<int> dataset1 = new BarDataset<int>(RandomScalingFactor(InitalCount), horizontal: true)
        {
            Label = "My first dataset",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, ChartColors.Red)),
            BorderColor = ColorUtil.FromDrawingColor(ChartColors.Red),
            BorderWidth = 1
        };

        IDataset<int> dataset2 = new BarDataset<int>(RandomScalingFactor(InitalCount), horizontal: true)
        {
            Label = "My second dataset",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, ChartColors.Blue)),
            BorderColor = ColorUtil.FromDrawingColor(ChartColors.Blue),
            BorderWidth = 1
        };

        _config.Data.Labels.AddRange(Months.Take(InitalCount));
        _config.Data.Datasets.Add(dataset1);
        _config.Data.Datasets.Add(dataset2);
    }

    private void RandomizeData()
    {
        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            int count = dataset.Count;
            dataset.Clear();
            for (int i = 0; i < count; i++)
            {
                if (_rng.NextDouble() < 0.2)
                {
                    dataset.Add(0);
                }
                else
                {
                    dataset.Add(RandomScalingFactor());
                }
            }
        }

        _chart.Update();
    }

    private void AddDataset()
    {
        Color color = ChartColors.All[_config.Data.Datasets.Count % ChartColors.All.Count];
        IDataset<int> dataset = new BarDataset<int>(RandomScalingFactor(_config.Data.Labels.Count), horizontal: true)
        {
            Label = $"Dataset {_config.Data.Datasets.Count}",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(128, color)),
            BorderColor = ColorUtil.FromDrawingColor(color),
            BorderWidth = 1
        };

        _config.Data.Datasets.Add(dataset);
        _chart.Update();
    }

    private void RemoveDataset()
    {
        IList<IDataset> datasets = _config.Data.Datasets;
        if (datasets.Count == 0)
            return;

        datasets.RemoveAt(datasets.Count - 1);
        _chart.Update();
    }

    private void AddData()
    {
        if (_config.Data.Datasets.Count == 0)
            return;

        string month = Months[_config.Data.Labels.Count % Months.Count];
        _config.Data.Labels.Add(month);

        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            dataset.Add(RandomScalingFactor());
        }

        _chart.Update();
    }

    private void RemoveData()
    {
        if (_config.Data.Datasets.Count == 0 ||
            _config.Data.Labels.Count == 0)
        {
            return;
        }

        _config.Data.Labels.RemoveAt(_config.Data.Labels.Count - 1);

        foreach (IDataset<int> dataset in _config.Data.Datasets)
        {
            dataset.RemoveAt(dataset.Count - 1);
        }

        _chart.Update();
    }

#line default
#line hidden
#nullable disable

    }
}
#pragma warning restore 1591
