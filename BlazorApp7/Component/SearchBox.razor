@using System.Timers
@implements IDisposable
<div class="search">
    <i class="oi oi-eye"></i>
    <input placeholder="Search..." @attributes="AdditionalAttributes" @bind="SearchQuery" @bind:event="oninput" />
    <input type="button" value="Search" @onclick="Seach" /> <!--부모로 전달하는 역할  delegate-->
</div>
<hr/>
자식 : @SearchQuery
@code{
    private string searchQuery;
    private Timer debounceTimer;
    public string SearchQuery
    {
        get => searchQuery;
        set { searchQuery = value;
            debounceTimer.Stop();   //3초내 (Debounce초) 입력안되면 멈춰있음
            debounceTimer.Start();
        }
    }

    [Parameter(CaptureUnmatchedValues =true)] // 부모에서 받은 값을 다받아온다
    public IDictionary<string,object> AdditionalAttributes { get; set; }
    [Parameter]
    public int Debounce { get; set; } = 3000; //3초

    protected override void OnInitialized()
    {
        debounceTimer = new Timer();
        debounceTimer.Interval = Debounce;
        debounceTimer.AutoReset = false;
        debounceTimer.Elapsed += SeachHandler;
    }
    //자식컴포넌트에서 발생한 정보를 부모컴포넌트에게 전달
    [Parameter]
    public EventCallback<string> SearchQueryChanged { get; set; }

    protected void Seach()
    {
        SearchQueryChanged.InvokeAsync(SearchQuery);    //부모에게 메서드 전달
    }

    protected async void SeachHandler(object soure,ElapsedEventArgs e)
    {
        await InvokeAsync(()=> SearchQueryChanged.InvokeAsync(SearchQuery));    //부모에게 메서드 전달
    }

    public void Dispose()   // 타이머는 소멸 되어야하는 속성임
    {
        debounceTimer.Dispose();
    }
}